boxes:
- id: anchor
  inputs: {}
  operationId: Anchor
  parameters:
    description: |
      Calculates the general metrics of a graph like
      average degree, etc.

      Also shows information about the Connected Components as well as distribution histograms.
    icon: /images/icons/black_medium_square.png
    parameters: '[{"kind":"text","id":"CustomPercentile","defaultValue":"0.8","$$hashKey":"object:1753"}]'
  parametricParameters: {}
  x: -405.9499642976487
  y: 0.0
- id: Compute-degree_1
  inputs:
    graph:
      boxId: input-graph
      id: input
  operationId: Compute degree
  parameters:
    apply_to_graph: ''
    direction: outgoing edges
    name: odegree
  parametricParameters: {}
  x: -67.11468696817506
  y: 762.746548242263
- id: input-graph
  inputs: {}
  operationId: Input
  parameters:
    name: graph
  parametricParameters: {}
  x: -496.140485410232
  y: 738.2951266670741
- id: output-graph
  inputs:
    output:
      boxId: SQL2_7
      id: table
  operationId: Output
  parameters:
    name: General Metrics
  parametricParameters: {}
  x: 1351.7726706800315
  y: 718.1548460520909
- id: Compute-degree_2
  inputs:
    graph:
      boxId: input-graph
      id: input
  operationId: Compute degree
  parameters:
    apply_to_graph: ''
    direction: incoming edges
    name: idegree
  parametricParameters: {}
  x: -63.014210089099336
  y: 410.62527446546426
- id: Compute-degree_3
  inputs:
    graph:
      boxId: input-graph
      id: input
  operationId: Compute degree
  parameters:
    apply_to_graph: ''
    direction: all edges
    name: adegree
  parametricParameters: {}
  x: -52.649701021202354
  y: 280.3149738993578
- id: Compute-degree_4
  inputs:
    graph:
      boxId: input-graph
      id: input
  operationId: Compute degree
  parameters:
    apply_to_graph: ''
    direction: symmetric edges
    name: sdegree
  parametricParameters: {}
  x: -60.85872800683232
  y: 886.684672116515
- id: Find-connected-components_1
  inputs:
    graph:
      boxId: input-graph
      id: input
  operationId: Find connected components
  parameters:
    apply_to_graph: ''
    directions: ignore directions
    name: connected_components
  parametricParameters: {}
  x: -56.71762706820966
  y: 1055.2937490781696
- id: SQL1_2
  inputs:
    input:
      boxId: Compute-degree_2
      id: graph
  operationId: SQL1
  parameters: {}
  parametricParameters:
    sql: |-
      select
        4 as ID,
        "In Degree" as Attribute,
        sum(idegree) as Sum,
        avg(idegree) as Avg,
        percentile(idegree, 0) as Min,
        percentile(idegree, 0.05) as `5% percentile`,
        percentile(idegree, 0.5) as Med,
        percentile(idegree, 0.95) as `95% percentile`,
        percentile(idegree, 1) as Max,
        percentile(idegree, $CustomPercentile) as `${scala.math.round(CustomPercentile.toDouble*100)}% (custom) percentile`
      from vertices
  x: 288.5808923185381
  y: 411.1482270299063
- id: SQL2_1
  inputs:
    one:
      boxId: SQL1_1
      id: table
    two:
      boxId: SQL1_2
      id: table
  operationId: SQL2
  parameters:
    sql: |-
      select * from `one`
      UNION
      select * from `two`
  parametricParameters: {}
  x: 529.8522063838773
  y: 342.3706143027851
- id: SQL1_3
  inputs:
    input:
      boxId: Compute-degree_1
      id: graph
  operationId: SQL1
  parameters: {}
  parametricParameters:
    sql: |-
      select
        4 as ID,
        "Out Degree" as Attribute,
        sum(odegree) as Sum,
        avg(odegree) as Avg,
        percentile(odegree, 0) as Min,
        percentile(odegree, 0.05) as `5% percentile`,
        percentile(odegree, 0.5) as Med,
        percentile(odegree, 0.95) as `95% percentile`,
        percentile(odegree, 1) as Max,
        percentile(odegree, $CustomPercentile) as `${scala.math.round(CustomPercentile.toDouble*100)}% (custom) percentile`
      from vertices
  x: 283.9361472871557
  y: 782.3574700141047
- id: SQL1_4
  inputs:
    input:
      boxId: Compute-degree_4
      id: graph
  operationId: SQL1
  parameters: {}
  parametricParameters:
    sql: |-
      select
        6 as ID,
        "Sym Degree" as Attribute,
        sum(sdegree) as Sum,
        avg(sdegree) as Avg,
        percentile(sdegree, 0) as Min,
        percentile(sdegree, 0.05) as `5% percentile`,
        percentile(sdegree, 0.5) as Med,
        percentile(sdegree, 0.95) as `95% percentile`,
        percentile(sdegree, 1) as Max,
        percentile(sdegree, $CustomPercentile) as `${scala.math.round(CustomPercentile.toDouble*100)}% (custom) percentile`
      from vertices
  x: 277.8776277603912
  y: 900.7189825281388
- id: SQL2_2
  inputs:
    one:
      boxId: SQL1_3
      id: table
    two:
      boxId: SQL1_4
      id: table
  operationId: SQL2
  parameters:
    sql: |-
      select * from `one`
      UNION
      select * from `two`
  parametricParameters: {}
  x: 524.3051786163214
  y: 864.061290857257
- id: SQL2_3
  inputs:
    one:
      boxId: SQL1_8
      id: table
    two:
      boxId: SQL1_7
      id: table
  operationId: SQL2
  parameters:
    sql: |-
      select * from `one`
      UNION
      select * from `two`
  parametricParameters: {}
  x: 522.7602206745829
  y: 571.2720456358218
- id: SQL2_5
  inputs:
    one:
      boxId: SQL2_1
      id: table
    two:
      boxId: SQL2_3
      id: table
  operationId: SQL2
  parameters:
    sql: |-
      select * from `one`
      UNION
      select * from `two`
  parametricParameters: {}
  x: 753.5063910735081
  y: 461.820195494299
- id: SQL2_6
  inputs:
    one:
      boxId: SQL2_2
      id: table
    two:
      boxId: SQL1_5
      id: table
  operationId: SQL2
  parameters:
    sql: |-
      select * from `one`
      UNION
      select * from `two`
  parametricParameters: {}
  x: 731.0822844109917
  y: 994.8172620739106
- id: SQL2_7
  inputs:
    one:
      boxId: SQL2_5
      id: table
    two:
      boxId: SQL2_6
      id: table
  operationId: SQL2
  parameters: {}
  parametricParameters:
    sql: |-
      select Attribute, Sum, Avg, Min, `5% percentile`, Med, `95% percentile`, Max, `${scala.math.round(CustomPercentile.toDouble*100)}% (custom) percentile`
      from(
      select * from `one`
      UNION
      select * from `two`
      )
      order by ID
  x: 999.6602666584771
  y: 720.2817648585165
- id: SQL1_5
  inputs:
    input:
      boxId: Find-connected-components_1
      id: graph
  operationId: SQL1
  parameters: {}
  parametricParameters:
    sql: |
      select
        7 as ID,
        "Connected Components" as Attribute,
        count(size) as Sum,
        avg(size) as Avg,
        percentile(size, 0) as Min,
        percentile(size, 0.05) as `5% percentile`,
        percentile(size, 0.5) as Med,
        percentile(size, 0.95) as `95% percentile`,
        percentile(size, 1) as Max,
        percentile(size, $CustomPercentile) as `${scala.math.round(CustomPercentile.toDouble*100)}% (custom) percentile`
      from
      (select max(size) as size from `connected_components.vertices` group by id)
  x: 265.65531490680087
  y: 1096.0622660356826
- id: SQL1_8
  inputs:
    input:
      boxId: input-graph
      id: input
  operationId: SQL1
  parameters: {}
  parametricParameters:
    sql: |-
      select
        1 as ID,
        "Vertices" as Attribute,
        scalars.`!vertex_count` as Sum,
        double(null) as Avg,
        double(null) as Min,
        double(null) as `5% percentile`,
        double(null) as Med,
        double(null) as `95% percentile`,
        double(null) as Max,
        double(null) as `${scala.math.round(CustomPercentile.toDouble*100)}% (custom) percentile`
      from scalars
  x: 293.0
  y: 532.0
- id: SQL1_7
  inputs:
    input:
      boxId: input-graph
      id: input
  operationId: SQL1
  parameters:
    sql: |-
      select
        2 as ID,
        "Edges" as Attribute,
        scalars.`!edge_count` as Sum,
        double(null) as Avg,
        double(null) as Min,
        double(null) as `5% percentile`,
        double(null) as Med,
        double(null) as `95% percentile`,
        double(null) as Max,
        double(null) as `${scala.math.round(CustomPercentile.toDouble*100)}% (custom) percentile`
      from scalars
  parametricParameters: {}
  x: 284.0
  y: 647.0
- id: SQL1_1
  inputs:
    input:
      boxId: Compute-degree_3
      id: graph
  operationId: SQL1
  parameters: {}
  parametricParameters:
    sql: |-
      select
        3 as ID,
        "Degree" as Attribute,
        sum(adegree) as Sum,
        avg(adegree) as Avg,
        percentile(adegree, 0) as Min,
        percentile(adegree, 0.05) as `5% percentile`,
        percentile(adegree, 0.5) as Med,
        percentile(adegree, 0.95) as `95% percentile`,
        percentile(adegree, 1) as Max,
        percentile(adegree, $CustomPercentile) as `${scala.math.round(CustomPercentile.toDouble*100)}% (custom) percentile`
      from vertices
  x: 288.0
  y: 279.0
- id: Custom-plot_1
  inputs:
    table:
      boxId: SQL1_9
      id: table
  operationId: Custom plot
  parameters:
    plot_code: |-
      Vegas()
        .withData(table)
        .encodeX("degrees", Quant, bin=Bin(maxbins=20.0))
        .encodeY("Vertices", Quant,  scale= new vegas.spec.Spec.Scale(`type` = Some(ScaleType.Log)) )
        .mark(Bar)
  parametricParameters: {}
  x: 631.0940838335453
  y: 3.5922531942784133
- id: SQL1_9
  inputs:
    input:
      boxId: Compute-degree_3
      id: graph
  operationId: SQL1
  parameters:
    sql: |-
      select degrees, count(degrees)-double(0.01) as Vertices
      from
      (select adegree as degrees
      from vertices
      order by degrees desc)
      group by degrees
  parametricParameters: {}
  x: 297.6615920124063
  y: -2.496960085144991
- id: Output_1
  inputs:
    output:
      boxId: Custom-plot_1
      id: plot
  operationId: Output
  parameters:
    name: Degree Distribution
  parametricParameters: {}
  x: 1325.9873484696325
  y: 2.050507680113853
- id: SQL1_11
  inputs:
    input:
      boxId: Find-connected-components_1
      id: graph
  operationId: SQL1
  parameters:
    sql: |-
      select size as SizeOfComponent, count(size)-double(0.01) as NumberOfComponents
      from
      (select max(size) as size from `connected_components.vertices` group by id)
      group by size
  parametricParameters: {}
  x: 266.0080512028443
  y: 1281.1292432879043
- id: Custom-plot_3
  inputs:
    table:
      boxId: SQL1_11
      id: table
  operationId: Custom plot
  parameters:
    plot_code: |-
      Vegas()
        .withData(table)
        .encodeX("SizeOfComponent", Quant, bin=Bin(maxbins=20.0))
        .encodeY("NumberOfComponents", Quant,  scale= new vegas.spec.Spec.Scale(`type` = Some(ScaleType.Log)) )
        .mark(Bar)
  parametricParameters: {}
  x: 555.4097886263496
  y: 1277.7389240087218
- id: Output_2
  inputs:
    output:
      boxId: Custom-plot_3
      id: plot
  operationId: Output
  parameters:
    name: Component Distribution
  parametricParameters: {}
  x: 1365.6940437843361
  y: 1267.7958951999615
