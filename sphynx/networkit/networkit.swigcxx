// "go build" will generate and compile wrappers based on this file.
%module networkit

// This part is C++ that is added to the wrapper code.
%{
#include <networkit/centrality/ApproxCloseness.hpp>
#include <networkit/centrality/Betweenness.hpp>
#include <networkit/centrality/EigenvectorCentrality.hpp>
#include <networkit/centrality/EstimateBetweenness.hpp>
#include <networkit/centrality/HarmonicCloseness.hpp>
#include <networkit/centrality/KatzCentrality.hpp>
#include <networkit/centrality/KPathCentrality.hpp>
#include <networkit/centrality/LaplacianCentrality.hpp>
#include <networkit/centrality/Sfigality.hpp>
#include <networkit/generators/BarabasiAlbertGenerator.hpp>
#include <networkit/graph/Graph.hpp>
#include <networkit/graph/GraphBuilder.hpp>
#include "additions.h"
using namespace NetworKit;
%}

// This part defines the interfaces to wrap. Mostly by pulling in the C++ headers.
#define final
%include "include/networkit/Globals.hpp"
typedef uint64_t count;
class Graph {
public:
  count numberOfNodes() const noexcept;
  count numberOfEdges() const noexcept;
};
%typemap(gotype) (SphynxId *) %{[]uint32%}
%typemap(in) (SphynxId *) {
   $1 = ($1_ltype)$input.array;
}
%include "additions.h"
%include <stdint.i>
%include <std_vector.i>
namespace std {
  %template(IdVector) vector<unsigned long long>;
  %template(DoubleVector) vector<double>;
}
%include "include/networkit/base/Algorithm.hpp"
%ignore ranking;
%include "include/networkit/centrality/Centrality.hpp"
%include "include/networkit/centrality/ApproxCloseness.hpp"
%include "include/networkit/centrality/Betweenness.hpp"
%include "include/networkit/centrality/EigenvectorCentrality.hpp"
%include "include/networkit/centrality/EstimateBetweenness.hpp"
%include "include/networkit/centrality/HarmonicCloseness.hpp"
%include "include/networkit/centrality/KatzCentrality.hpp"
%include "include/networkit/centrality/KPathCentrality.hpp"
%include "include/networkit/centrality/LaplacianCentrality.hpp"
%include "include/networkit/centrality/Sfigality.hpp"
%include "include/networkit/generators/StaticGraphGenerator.hpp"
%include "include/networkit/generators/BarabasiAlbertGenerator.hpp"
%include "include/networkit/graph/GraphBuilder.hpp"
