[[attributes]]
## Vertex and edge attributes

Vertex attributes are values that are defined on some or all individual vertices of the graph.
Edge attributes are values that are defined on some or all individual edges of the graph.

Each attribute has a type. For each vertex/edge the attribute is either undefined or the value
of the attribute is a value from the attribute's type.

Clicking on a vertex or edge attribute opens a menu with the for following information/controls.

* The type of the attribute (e.g. `String`, `Double`, ...).
* A short description of how the attribute was created, if available, with link to a relevant help
page.
* A histogram of the attribute, if the attribute is already computed. A menu item to compute the
histogram otherwise. By default, for performance reasons, histograms are only computed on a
sample of all the available data. Click the _"precise"_
checkbox to request a computation using all the data. Click the _"logarithmic"_ checkbox, to use a
logarithmic X-axis with logarithmic buckets. (Useful when the distribution is strongly skewed.)
* If you are viewing the graph in a <<Graph visualization>> box: Controls for adding the attribute
* to the current visualization, if <<concrete-vertices-view>> or
<<bucketed-view>> is enabled. See details in <<concrete-visualization-options>>.

There are lots of ways you can create attributes:

* When importing vertices/edges from a CSV every column will automatically become an attribute.
* You can also import attributes for existing vertices from a CSV file.
* You can compute various graph metrics on the vertices/edges. (Just to name a few, you can compute
<<compute-degree>>, <<compute-clustering-coefficient>> for vertices and <<compute-dispersion>> for
edges.)
* You can derive more attributes from existing ones using the <<derive-vertex-attribute>>
and <<derive-edge-attribute>> operations.
* You can spread attributes via edges in various ways, e.g. by <<aggregate-on-neighbors>>.

### Undefined values

Sometimes a vertex (or an edge) does not have any value for a particular attribute. For example,
in a Facebook graph, the user's hometown might or might not be given. In such a case, we say that this
attribute is _undefined_ for that particular vertex (or edge). Usually, an undefined value
represents the fact that the information is unknown. Indeed, some algorithms (e.g.,
<<predict-attribute-by-viral-modeling>>) work on undefined attribute values, and their job is
to fill them in with reasonable estimates.

Note that an empty string and an undefined value are two different concepts.
Suppose, for example, that a person's name is represented by three attributes:
`FirstName`, `MiddleName`, and `LastName`. In this case, `MiddleName` could be the
empty string (meaning that the person in question has no middle name), or it could be
undefined (meaning that their middle name is not known). Thus, the empty string is
treated as an ordinary String attribute.

Differences between undefined and defined values:

* In histograms, undefined values are not counted, whereas defined values
(including the empty string) are counted.
* Filters work only on defined attributes. (See <<Filter by attributes>>.)
* <<derive-edge-attribute>> and <<derive-vertex-attribute>> allow you to choose whether to evaluate
the expression if some of the inputs are undefined.

<<fill-vertex-attributes-with-constant-default-values>> can be used to replace undefined values with
a constant. By replacing them with a special value, they can be made part of histograms or filters.

#### CSV export/import and undefined

When exporting attributes, LynxKite differentiates between undefined attributes and
empty strings. For example, if attribute `attr` is undefined for Adam and Eve, but
is defined to be the empty string for Bob and Joe, here's what the output looks like.
Note that the empty string is denoted by `""`, whereas the undefined value is
completely empty (i.e., there is nothing between the commas):

----
"name","attr","age"
"Adam",,20.3
"Eve",,18.2
"Bob","",50.3
"Joe","",2.0
----

Note, however, that importing this data from a CSV file will treat undefined values
as empty strings. So, in this case, the distinction between undefined values
and empty strings is lost. One way to overcome this difficulty is to replace
empty strings with another, unique string (e.g., `"@"`) before exporting
to CSV files. (Other export and import formats do not suffer from this limitation.)

#### Creating undefined values

It might be necessary to create attributes that are undefined for certain
vertices/edges. (An example use case is when you want to create input
for a fingerprinting or a viral modelling operation.) This can be done
with <<derive-vertex-attribute>> (or <<derive-edge-attribute>>)
operation. For example, the Scala expression

----
if (attr > 0) Some(attr) else None
----

will return `attr` whenever its value is positive, and undefined otherwise.
