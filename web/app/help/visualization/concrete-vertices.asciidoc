## Concrete vertices view

Shows some selected [[center-vertices]]center vertices and their neighborhood with all the edges
among these vertices. The set of the center vertices and the size of the neighborhood can be
selected by the user.

The first line shows the _"Visualization settings"_:

[[concrete-view-settings]]
Display::
The first button lets you select between 2D and 3D visualization. 3D allows for showing more vertices efficiently but
that mode has less features. You cannot (yet) visualize attributes in 3D mode and cannot select and
move around vertices.

Layout animation::
(Only in 2D mode) If the second button is enabled, layout animation will continuously do a physical simulation on the
displayed graph as if edges were springs. You can move vertices around and the graph will
reorganize itself.

Label attraction::
When animation is enabled, this will make vertices with the same label attract each other, which
results in same label vertices being grouped together.

Layout style::
When animation is enabled, this option determines the exact physics of the simulation.
The different options can be useful depending on the structure of the network that is visualized.
+
The available options are:
+
Expanded::: Try to expand the graph as much as possible.
Centralized::: High-degree nodes in the center, low-degree nodes on the periphery.
Decentralized::: Low-degree nodes in the center, high-degree nodes on the periphery.
Neutral::: Degree is not factored into the layout.

Centers::
Lists "center" vertex IDs, that is the vertices whose neighborhood we are displaying. You can change
this list manually, using the <<pick-button,Pick button>>.

Radius::
You can set the neighborhood radius from 0 to 10. 0 means center vertices only. 1 means center
vertices and their immediate neighbors. 2 also contains neighbors of neighbors. And so on.

Edge style::
Edges can either be displayed as _directed_ (the default) or _undirected_. The directed mode shows
edges as curved arrows. In the undirected mode they are displayed as straight lines.

### Pick button
This button is used to select a new set of centers. The vertices
placed there will be ones that satisfy all the currently set restrictions (see
below).
The available options are:

Center count:: The number of centers to be picked. (Default: 1)

Restrictions narrow down the potential set of candidates that will be
chosen when you click on the _Pick_ button. They have the same syntax as
filters. (See <<Filter by attributes>>.) There are two ways to specify them:

Use graph attribute filters::
(Default.) Use the currently set vertex attribute filters as restrictions.
Use custom restrictions::
Manually enter restrictions. When switching to this mode, the graph filters
are automatically copied into the custom restriction list, which can be edited then.

After picking one set of centers with the _Pick_ button the button is replaced by the _Next_ button.
Clicking this button will iterate over samples that match the conditions. The samples will show up
in a deterministic order. You can skip to an arbitrary sample by clicking on the
+++<label class="btn btn-default"><i class="glyphicon glyphicon-menu-right"></i></label>+++
button. There you can manually enter a position in the sequence and pick it by clicking on
 _Pick by offset_.

### Concrete visualization options

#### Vertex visualizations

Label::
Shows the value of the attribute as a label on the displayed vertices.

Color::
Colors vertices based on this attribute. A different color will be selected for each value
of the attribute. If the attribute is numeric, the selected color will be a continuous function of
the attribute value. This is available for `String` and `number` attributes.

Opacity::
Changes the opacity of vertices based on this attribute. The higher the value of the
attribute the more opaque the vertex will get.

Icon::
Displays each vertex by an icon based on the value of this attribute.
The available icons are "circle", "square", "hexagon", "female", "male", "person", "phone", "home",
"triangle", "pentagon", "star", "sim", "radio". If the value of the attribute is one of the above strings,
then the corresponding icon will be selected. For other values we select arbitrary icons. When we run out of
icons, we fall back to circle. This is only available for `String` attributes.

Image::
Interprets the value of the attribute as an image URL and displays the referenced image in place of
the vertex. This can be used e.g. to show facebook profile pictures.

Size::
The size of vertices will be set based on this attribute. Only available for numeric attributes.

Position::
Available on attributes of type `Vector[number]`. The first two elements of the vector will be
interpreted as (X, Y) coordinates on the plane and vertices will be laid out on the screen based
on these coordinates.
(You can create a `Vector[number]` from two number attributes using the
<<Bundle vertex attributes into a vector>> operation.)

Geo coordinates::
Available on attributes of type `Vector[number]`. The first two elements of the vector will be
interpreted as latitude-longitude coordinates and vertices will be put on a world map based
on these coordinates.
(You can create a `Vector[number]` from two number attributes using the
<<Bundle vertex attributes into a vector>> operation.)

Slider::
Available for `number` attributes. Adds an interactive slider to the visualization.
As you move the slider from the minimum to the maximum value of the attribute,
the vertices change their color. Vertices below the selected value get the first color,
vertices above the selected value get the second color.
+
You can choose the color scheme to use. If you choose a color scheme where vertices can become
transparent, the edges of the transparent vertices will also disappear. This is a great option
for visualizing the evolution of a graph over time.

#### Edge visualizations

Edge label::
Will show the value of the attribute as a label on each edge.

Edge color::
Will color edges based on this attribute. A different color will be selected for each value
of the attribute. If the attribute is numeric, the selected color will be a continuous function of
the attribute value. Coloring is available for `String` and `number` attributes.

Width::
The width of edge will be set based on this attribute. Only available for numeric attributes.

#### Color maps

When an attribute is visualized as _Vertex color_, _Label color_, or _Edge color_, you can also
choose a color map in the same menu. LynxKite offers a wide choice of sequential and divergent
color maps. Divergent color maps will have their neutral color assigned to zero values, while
sequential color maps simply span from the minimal value to the maximal.

Lightness is an important property of color maps. A good color map is as linear as possible in
lightness charts. For more discussion see Matplotlib's
https://matplotlib.org/users/colormaps.html[Choosing Colormaps] article.

Lightness charts for the available color maps:

image::images/sequential-colormaps.png[Sequential colormaps]

image::images/divergent-colormaps.png[Divergent colormaps]
