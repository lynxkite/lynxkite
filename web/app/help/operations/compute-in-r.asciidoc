### Compute in R

Executes custom R code to define new vertex, edge, or graph attributes, to transform a table,
or to create plots and interactive visualizations.

#### Computing new attributes

The following example computes two new vertex attributes (`with_title` and `age_squared`),
two new edge attributes (`score` and `names`), and two new graph_attributes (`hello` and `average_age`).
(You can try it on the <<Create example graph, example graph>> which
has the attributes used in this code.)

[source,r]
----
vs$with_title <- paste("The Honorable", vs$name)
vs$age_squared <- vs$age ** 2
es$score <- es$weight + nchar(es$comment)
es$names <- paste("from", vs$name[es$src], "to", vs$name[es$dst])
graph_attributes$hello <- tolower(graph_attributes$greeting)
graph_attributes$average_age <- mean(vs$age)
----

`graph_attributes` is an object you can use to get and set graph attributes.

`vs` (for "**v**ertice**s**") and `es` (for "**e**dge**s**") are both
https://tibble.tidyverse.org/reference/tibble.html[tibbles].
You can write natural R code and use the usual APIs and packages to
compute new attributes. Dplyr is already imported.
`es` can have `src` and `dst` columns which are the indexes of the source and destination
vertex for each edge. These can be used to index into `vs` as in the example.

Assign the new columns to these same data frames to output new vertex or edge attributes.

When you write this R code, the input data may not be available yet.
And you may want to keep building on the output of the box without having
to wait for the R code to execute. To make this possible, LynxKite has
to know the inputs and outputs of your code without executing it.
You specify them through the _Inputs_ and _Outputs_ parameters.
For outputs you must also declare their types.

The currently supported types for outputs are:

- `double` to create a `number`-typed attribute or `Double`-typed table column.
- `character` to create a `String`-typed attribute or table column.
- `integer` to create a `Long`-typed table column.
- `vector` to create a `Vector[number]`-typed attribute.

In the first example we would set:

- Inputs: `vs.name, vs.age, es.weight, es.comment, es.src, es.dst, graph_attributes.greeting`
- Outputs: `vs.with_title: character, vs.age_squared: double, es.score: double, es.names: character, graph_attributes.hello: character, graph_attributes.average_age: double`

#### Working with vectors

Vector-typed attributes are stored as list columns in the `vs` and `es` DataFrames.

To output a vector-typed attribute, you can create a list column or a matrix:

[source,r]
----
# Put the age and its double into a vector.
vs$v <- outer(vs$age, c(1, 2))
----

On the <<Create example graph, example graph>> this would output:

----
               v
0   [20.3, 40.6]
1   [18.2, 36.4]
2  [50.3, 100.6]
3     [2.0, 4.0]
----

When a vector attribute is your input, it always appears as a list column.
You can use https://dplyr.tidyverse.org/articles/rowwise.html[`rowwise()`]
to work with it more comfortably.

[source,r]
----
vs <- vs %>%
  rowwise() %>%
  mutate(total_v = sum(v))
----

#### Transforming tables

Manipulating tables works the same way, but with a single data frame called `df`:

[source,r]
----
df$with_title <- paste("The Honorable", df$name)
----

#### Creating plots

Instead of outputting a modified graph or table, you can choose to output a plot
created in R. To do this, set the outputs to `plot` or `html`.

With the `plot` setting you can use ggplot2 or any library that draws
to the current graphics device.
The plot is produced as an SVG, so it will look crisp in any resolution.

An example:

[source,r]
----
library(tidyverse)
ggplot(data = vs) +
 geom_point(mapping = aes(x = income, y = age))
----

The `html` setting can be used with R packages that produce custom HTML
visualizations. You can use libraries like Plotly to create interactive plots.
In this case the value of your code has to be an HTML string, or an HTML widget.

See the https://plotly.com/r/line-and-scatter/[Plotly] examples or the
https://www.htmlwidgets.org/showcase_leaflet.html[htmlwidgets showcase] to get started.

====
[p-code]#Code#::
The R code you want to run. See the operation description for details.

[p-inputs]#Inputs#::
A comma-separated list of attributes that your code wants to use.
For example, `vs.my_attribute, vs.another_attribute, graph_attributes.last_one`.

[p-outputs]#Outputs#::
A comma-separated list of attributes that your code generates.
These must be annotated with the type of the attribute.
For example, `vs.my_new_attribute: character, vs.another_new_attribute: double, graph_attributes.also_new: character`.
+
Set to `plot` or `html` to output visualizations.
====
