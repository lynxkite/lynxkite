### Filter by attributes

Keeps only vertices and edges that match the specified filters.

You can specify filters for multiple attributes at the same time, in which case you will be left
with vertices/edges that match all of your filters.

Regardless of the exact the filter, whenever you specify a filter for an attribute you always
restrict to those edges/vertices where the attribute is defined. E.g. if say you have a filter
requiring age > 10, then you will only keep vertices where age attribute is defined and the value of
age is more than ten.

The filtering syntax depends on the type of the attribute in most cases.

[p-ref1]#Match all filter#::
For every attribute type `*` matches all defined values. This is useful for discarding
vertices/edges where a specific attribute is undefined.

[p-ref2]#Comma separated list#::
This filter is a comma-separated list of values you want to match. It can be used for
`String` and `number` types. For example `medium,high` would be a String filter
to match these two values only, e.g., it would exclude `low` values. Another example is `19,20,30`.

[p-ref3]#Comparison filters#::
These filters are available for `String` and `number` types.
You can specify bounds, with the `<`, `>`, `&lt;=`, `>=` operators;
furthermore, `=` and `==` are also accepted as operators, providing exact matching.
For example `>=12.5` will match values no less than 12.5. Another example is `&lt;=apple`: this matches
the word `apple` itself plus those words that come before `apple` in a lexicographic ordering.

[p-ref4]#Interval filters#::
For `String` and `number` types you can specify intervals with brackets.
The parenthesis (`( )`) denotes an exclusive boundary
and the square bracket (`[ ]`) denotes an inclusive boundary. The lower and upper boundaries can be
both inclusive or exclusive, or they can be different.
For example, `[0,10)` will match _x_ if 0 &le; _x_ < 10. Another example is
`[2018-03-01,2018-04-22]`; this matches those dates that fall between the given dates (inclusively),
assuming that the filtered attribute is question is a string representing a date in the given format (`YYYY-MM-DD`).


[p-ref5]#Regex filters#::
For `String` attributes, regex filters can also be applied. The following tips and examples
can be useful:
* `regex(xyz)` for finding strings that contain `xyz`.
* `regex(^Abc)` for strings that start with `Abc`.
* `regex(Abc$)` for strings that end with `Abc`.
* `regex((.)\1)` for strings with double letters, like `abbc`.
* `regex(\d)` or `regex([0-9])` for strings that contain a digit, like `a2c`.
* `regex(^\d+$)` for strings that are valid integer numbers, like `123`.
* `regex(A|B)` for strings that contain either `A` or `B`.
* Regex is case sensitive.
* For a more detailed explanation see https://en.wikipedia.org/wiki/Regular_expression

[p-ref6]#Pairwise interval filters#::
For the `Vector[number]` type, you can use interval filters to filter the first and second
coordinates. List the intervals for the first and second coordinates separated with a comma.
Intervals can be specified with brackets, just like for the simple interval filters.
For example `[0,2), [3,4]` will match (x, y) if 0 &le; x < 2 and 3 &le; y &le; 4.

[p-ref7]#All and exists filters#::
These filters can be used for attributes whose type is `Vector`.
The filter `all(...)` will match the `Vector` only when the internal filter matches all elements of the
`Vector`. You can also use `forall` and `Ɐ` as synonyms. For example `all(<0)` for a `Vector[number]` will
match when the `Vector` contains no positive items. (This would include empty `Vector` values.)
The second filter in this category is `any(...)`; this will will match the `Vector` only when
the internal filter matches at least one element of
the `Vector`.
Synonyms are `exists`, `some`, and `∃`.
For example `any(male)` for a `Vector[String]` will match when the Vector contains at least one
`male`.  (This would not include empty vectors, but would include those where all elements are
`male`.)

[p-ref8]#Negation filter#::
Any filter can be prefixed with `!` to negate it. For example `!medium` will exclude
`medium` values. Another typical usecase for this is specifying `!` (a single exclamation mark
character) as the filter for a String attribute. This is interpreted as non-empty, so it will
restrict to those vertices/edges where the String attribute is defined and its value is not empty
string. Remember, all filters work on defined values only, so `!*` will not match any
vertices/edges.

[p-ref9]#Quoted strings#::
If you need a string filter that contains a character with a special meaning (e.g., `>`), use double quotes around
the string. E.g., `>"=apple"` matches exactly those strings that are lexicographically greater than
the string `=apple`. All characters but quote (`"`) and backslash (`\`) retain their
verbatim meaning in such a quoted string. The quotation character is used to show the boundaries of the
string and the backslash character can be used to provide a verbatim double quote or a backslash in
the quoted string. Thus, the filter `"=()\"\\"` matches `=()"\`.
