# Operations

Each box in a workspace represents a LynxKite operation. There are operations for adding new
attributes (such as <<Compute PageRank>>), changing the graph structure (such as
<<reverse-edge-direction>>), importing and exporting data, and for creating <<segmentations>>.


## The operation toolbox

There are several ways to add a box to the workspace. If you know its name, typing the slash
key (`/`) will bring up the search menu, where operations can be found by name. The same menu
can also be accessed via the magnifier icon
(+++<i class="glyphicon glyphicon-search"></i>+++).

In case you do not know the name of the operation, functional groups called "categories" will help
you find what you need. These categories are listed below, along with their toolbox icon.

Once you have found the operation, drag it to the workspace with the mouse to create a box for it.
As you drag, you can touch its inputs to other boxes to set up its connections with one motion. (Or
you can add the connections later. See <<boxes-and-arrows>>.)

Alternatively, you can press Enter on the operation to add its box at the current mouse position.
This allows you to search for and add multiple operations in quick succession.


## Categories

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category green"><i class="fa fa-upload"></i></div></div></div>+++ Import operations

These operations import external data to LynxKite. Example: <<Import CSV>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category green"><i class="fa fa-gavel"></i></div></div></div>+++ Build graph

These operations can build graphs - without importing data to LynxKite. Example: <<Create example graph>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category green"><i class="fa fa-filter"></i></div></div></div>+++ Subgraph

These operations create subgraphs - a graph formed from a subset of the vertices and edges of the original graph. Example: <<Filter by attributes>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category green"><i class="glyphicon glyphicon-th-large"></i></div></div></div>+++ Build segmentation

These operations create <<segmentations>>.
Example: <<Find connected components>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category yellow"><i class="glyphicon glyphicon-th-large"></i></div></div></div>+++ Use segmentation

These operations modify <<segmentations>>.
Example: <<Copy edges to base project>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category yellow"><i class="glyphicon glyphicon-asterisk"></i></div></div></div>+++ Structure

The operations in this category can change the overall graph structure by adding or
discarding vertices and/or edges. Examples: <<Add reversed edges>>, and <<Merge vertices by attribute>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category yellow"><i class="glyphicon glyphicon-globe"></i></div></div></div>+++ Scalars

The operations in this category manipulate global graph attributes (aka scalars). For example, <<correlate-two-attributes>>
computes the Pearson-correlation coefficient of two attributes, and stores the result
in a scalar.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category yellow"><i class="fa fa-circle"></i></div></div></div>+++ Vertex attributes

These operations manipulate (create, discard, convert etc.) vertex attributes.
These operations perform their task without looking at other
edges or vertices and they are not available if the graph has no vertices.
Example: <<add-constant-vertex-attribute>>.


### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category yellow"><i class="fa fa-share-alt"></i></div></div></div>+++ Edge attributes

These operations are similar to vertex attribute operations, but they manipulate
edge attributes. They are not available if the graph has no edges.
Example: <<add-random-edge-attribute>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category yellow"><i class="fa fa-podcast"></i></div></div></div>+++ Attribute propagation

These operations compute vertex attributes from attributes of their neighboring elements.
They only differ in how we define "neighboring elements". For example, in operation
<<aggregate-to-segmentation>>, these neighboring elements are all the vertices that
belong to the same segment (the segment being the vertex whose attribute this operation
computes). Another example is <<aggregate-edge-attribute-to-vertices>>; in this case
the "neighboring elements" are the edges that leave or enter the vertex. Yet another
example is <<aggregate-on-neighbors>>; the "neighboring elements" here are the other
vertices connected to the vertex.


### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category blue"><i class="fa fa-snowflake-o"></i></div></div></div>+++ Graph computation

Graph computation operations are similar to the vertex (or edge) attribute operations inasmuch
as they compute new attributes for each vertex (or edge). However, they are somewhat more
complex, since they are not restricted to that single vertex (or edge) in their computation. For example,
<<Compute degree>> creates a vertex attribute that depends on how many neighbors a given vertex has, so
it depends on the neighborhood of the vertex. A more complex example is <<Compute PageRank>>, which
is not even restricted on the immediate neighborhood of a vertex: it depends on the entire graph.
One might say that this category is about metrics that describe the graph structure in some way.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category blue"><i class="fa fa-android"></i></div></div></div>+++ Machine learning operations

These operations perform machine learning. A machine learning model is trained on a set of data, and
it can perform prediction or classification on a new set of data. For example, a logistic regression
model can be trained by the operation <<train-a-logistic-regression-model>> and it can classify new
data with the operation <<Classify with model>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category blue"><i class="fa fa-cogs"></i></div></div></div>+++ Workflow

Utility features to efficiently manage workfows. Examples: Users can add a <<Comment>> or create a <<Project union>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category pink"><i class="fa fa-wrench"></i></div></div></div>+++ Manage project

Utility features to manage and personalize projects by manipulating (discarding, copying, renaming, etc.) attributes, scalars and segmentations. Example:
<<Rename edge attributes>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category purple"><i class="fa fa-eye"></i></div></div></div>+++ Visualization operations

Visualization features. Examples: users can create charts with
<<Custom plot>>, or visualize a subset of the graph with <<Graph visualization>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category purple"><i class="fa fa-download"></i></div></div></div>+++ Export operations

These operations export data from LynxKite. Example: <<Export to CSV>>.

### +++<div class="operation-toolbox" style="display: inline-block;"><div class="categories"><div class="category yellow"><i class="fa fa-superpowers"></i></div></div></div>+++ Custom boxes

Users can add previously created custom boxes or <<built-ins>> to their workflow by selecting them from the Custom box menu.


[[experimental-operation]]
## Experimental operations

LynxKite includes cutting-edge algorithms that are under active scientific research. Most of these
algorithms are already ready for production use on large datasets. But some of the most recent
algorithms are not yet able to handle very large datasets efficiently. Their implementation is
subject to future change.

They are marked with the following line:

____
+++<i class="fa fa-warning"></i>+++ *Warning! Experimental operation.*
____

These experimental operations are included in LynxKite as a preview. Feedback on them is very much
appreciated. If you find them useful, let the development team know, so we can prioritize them for
improved scalability.


## The list of operations

// Autogenerated content below this line. Run generate-index.sh to regenerate.

include::add-constant-edge-attribute.asciidoc[]

include::add-constant-vertex-attribute.asciidoc[]

include::add-popularity-x-similarity-optimized-edges.asciidoc[]

include::add-random-edge-attribute.asciidoc[]

include::add-random-vertex-attribute.asciidoc[]

include::add-rank-attribute.asciidoc[]

include::add-reversed-edges.asciidoc[]

include::aggregate-edge-attribute-globally.asciidoc[]

include::aggregate-edge-attribute-to-vertices.asciidoc[]

include::aggregate-from-segmentation.asciidoc[]

include::aggregate-on-neighbors.asciidoc[]

include::aggregate-to-segmentation.asciidoc[]

include::aggregate-vertex-attribute-globally.asciidoc[]

include::anchor.asciidoc[]

include::approximate-clustering-coefficient.asciidoc[]

include::approximate-embeddedness.asciidoc[]

include::bundle-vertex-attributes-into-a-vector.asciidoc[]

include::check-cliques.asciidoc[]

include::classify-with-model.asciidoc[]

include::coloring.asciidoc[]

include::combine-segmentations.asciidoc[]

include::comment.asciidoc[]

include::compare-segmentation-edges.asciidoc[]

include::compute-centrality.asciidoc[]

include::compute-clustering-coefficient.asciidoc[]

include::compute-degree.asciidoc[]

include::compute-dispersion.asciidoc[]

include::compute-distance-via-shortest-path.asciidoc[]

include::compute-embeddedness.asciidoc[]

include::compute-hyperbolic-edge-probability.asciidoc[]

include::compute-in-python.asciidoc[]

include::compute-inputs.asciidoc[]

include::compute-pagerank.asciidoc[]

include::connect-vertices-on-attribute.asciidoc[]

include::convert-edge-attribute-to-double.asciidoc[]

include::convert-edge-attribute-to-string.asciidoc[]

include::convert-vertex-attribute-to-double.asciidoc[]

include::convert-vertex-attribute-to-string.asciidoc[]

include::convert-vertex-attributes-to-position.asciidoc[]

include::copy-edge-attribute.asciidoc[]

include::copy-edges-to-base-project.asciidoc[]

include::copy-edges-to-segmentation.asciidoc[]

include::copy-scalar-from-other-project.asciidoc[]

include::copy-scalar.asciidoc[]

include::copy-segmentation.asciidoc[]

include::copy-vertex-attribute.asciidoc[]

include::copy-vertex-attributes-from-segmentation.asciidoc[]

include::copy-vertex-attributes-to-segmentation.asciidoc[]

include::correlate-two-attributes.asciidoc[]

include::create-edges-from-co-occurrence.asciidoc[]

include::create-edges-from-set-overlaps.asciidoc[]

include::create-example-graph.asciidoc[]

include::create-graph-in-python.asciidoc[]

include::create-random-edges.asciidoc[]

include::create-scale-free-random-edges.asciidoc[]

include::create-vertices.asciidoc[]

include::custom-plot.asciidoc[]

include::define-segmentation-links-from-matching-attributes.asciidoc[]

include::derive-column.asciidoc[]

include::derive-edge-attribute.asciidoc[]

include::derive-scalar.asciidoc[]

include::derive-vertex-attribute.asciidoc[]

include::discard-edge-attributes.asciidoc[]

include::discard-edges.asciidoc[]

include::discard-loop-edges.asciidoc[]

include::discard-scalars.asciidoc[]

include::discard-segmentation.asciidoc[]

include::discard-vertex-attributes.asciidoc[]

include::embed-vertices-with-t-sne.asciidoc[]

include::embed-vertices.asciidoc[]

include::export-to-csv.asciidoc[]

include::export-to-hive.asciidoc[]

include::export-to-jdbc.asciidoc[]

include::export-to-json.asciidoc[]

include::export-to-orc.asciidoc[]

include::export-to-parquet.asciidoc[]

include::expose-internal-edge-id.asciidoc[]

include::expose-internal-vertex-id.asciidoc[]

include::external-computation-1.asciidoc[]

include::external-computation-10.asciidoc[]

include::external-computation-2.asciidoc[]

include::external-computation-3.asciidoc[]

include::external-computation-4.asciidoc[]

include::external-computation-5.asciidoc[]

include::external-computation-6.asciidoc[]

include::external-computation-7.asciidoc[]

include::external-computation-8.asciidoc[]

include::external-computation-9.asciidoc[]

include::fill-edge-attributes-with-constant-default-values.asciidoc[]

include::fill-vertex-attributes-with-constant-default-values.asciidoc[]

include::filter-by-attributes.asciidoc[]

include::find-connected-components.asciidoc[]

include::find-infocom-communities.asciidoc[]

include::find-maximal-cliques.asciidoc[]

include::find-modular-clustering.asciidoc[]

include::find-steiner-tree.asciidoc[]

include::find-triangles.asciidoc[]

include::fingerprint-based-on-attributes.asciidoc[]

include::graph-visualization.asciidoc[]

include::grow-segmentation.asciidoc[]

include::hash-vertex-attribute.asciidoc[]

include::import-csv.asciidoc[]

include::import-from-hive.asciidoc[]

include::import-jdbc.asciidoc[]

include::import-json.asciidoc[]

include::import-neo4j.asciidoc[]

include::import-orc.asciidoc[]

include::import-parquet.asciidoc[]

include::import-snapshot.asciidoc[]

include::import-union-of-table-snapshots.asciidoc[]

include::import-well-known-graph-dataset.asciidoc[]

include::input.asciidoc[]

include::link-project-and-segmentation-by-fingerprint.asciidoc[]

include::lookup-region.asciidoc[]

include::make-all-segments-empy.asciidoc[]

include::map-hyperbolic-coordinates.asciidoc[]

include::merge-parallel-edges-by-attribute.asciidoc[]

include::merge-parallel-edges.asciidoc[]

include::merge-parallel-segmentation-links.asciidoc[]

include::merge-two-edge-attributes.asciidoc[]

include::merge-two-vertex-attributes.asciidoc[]

include::merge-vertices-by-attribute.asciidoc[]

include::one-hot-encode-attribute.asciidoc[]

include::output.asciidoc[]

include::predict-attribute-by-viral-modeling.asciidoc[]

include::predict-edges-with-hyperbolic-positions.asciidoc[]

include::predict-vertex-attribute.asciidoc[]

include::predict-with-gcn.asciidoc[]

include::predict-with-model.asciidoc[]

include::project-rejoin.asciidoc[]

include::project-union.asciidoc[]

include::pull-segmentation-one-level-up.asciidoc[]

include::reduce-vertex-attributes-to-two-dimensions.asciidoc[]

include::rename-edge-attributes.asciidoc[]

include::rename-scalar.asciidoc[]

include::rename-segmentation.asciidoc[]

include::rename-vertex-attributes.asciidoc[]

include::replace-edges-with-triadic-closure.asciidoc[]

include::replace-with-edge-graph.asciidoc[]

include::reverse-edge-direction.asciidoc[]

include::sample-edges-from-co-occurrence.asciidoc[]

include::sample-graph-by-random-walks.asciidoc[]

include::save-to-snapshot.asciidoc[]

include::segment-by-double-attribute.asciidoc[]

include::segment-by-event-sequence.asciidoc[]

include::segment-by-geographical-proximity.asciidoc[]

include::segment-by-interval.asciidoc[]

include::segment-by-string-attribute.asciidoc[]

include::segment-by-vector-attribute.asciidoc[]

include::set-edge-attribute-icons.asciidoc[]

include::set-scalar-icon.asciidoc[]

include::set-segmentation-icon.asciidoc[]

include::set-vertex-attribute-icons.asciidoc[]

include::snowball-sample.asciidoc[]

include::split-edges.asciidoc[]

include::split-to-train-and-test-set.asciidoc[]

include::split-vertices.asciidoc[]

include::sql1.asciidoc[]

include::sql10.asciidoc[]

include::sql2.asciidoc[]

include::sql3.asciidoc[]

include::sql4.asciidoc[]

include::sql5.asciidoc[]

include::sql6.asciidoc[]

include::sql7.asciidoc[]

include::sql8.asciidoc[]

include::sql9.asciidoc[]

include::take-edges-as-vertices.asciidoc[]

include::take-segmentation-as-base-project.asciidoc[]

include::take-segmentation-links-as-base-project.asciidoc[]

include::train-a-decision-tree-classification-model.asciidoc[]

include::train-a-decision-tree-regression-model.asciidoc[]

include::train-a-gcn-classifier.asciidoc[]

include::train-a-gcn-regressor.asciidoc[]

include::train-a-kmeans-clustering-model.asciidoc[]

include::train-a-logistic-regression-model.asciidoc[]

include::train-linear-regression-model.asciidoc[]

include::transform.asciidoc[]

include::use-base-project-as-segmentation.asciidoc[]

include::use-metagraph-as-graph.asciidoc[]

include::use-other-project-as-segmentation.asciidoc[]

include::use-table-as-edge-attributes.asciidoc[]

include::use-table-as-edges.asciidoc[]

include::use-table-as-graph.asciidoc[]

include::use-table-as-segmentation-links.asciidoc[]

include::use-table-as-segmentation.asciidoc[]

include::use-table-as-vertex-attributes.asciidoc[]

include::use-table-as-vertices.asciidoc[]

include::weighted-aggregate-edge-attribute-globally.asciidoc[]

include::weighted-aggregate-edge-attribute-to-vertices.asciidoc[]

include::weighted-aggregate-from-segmentation.asciidoc[]

include::weighted-aggregate-on-neighbors.asciidoc[]

include::weighted-aggregate-to-segmentation.asciidoc[]

include::weighted-aggregate-vertex-attribute-globally.asciidoc[]
