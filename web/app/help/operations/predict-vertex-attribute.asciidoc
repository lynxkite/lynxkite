### Predict vertex attribute

If an attribute is defined for some vertices but not for others, machine learning can be used to
fill in the blanks. A model is built from the vertices where the attribute is defined and the
model predictions are generated for all the vertices.

The prediction is created in a new attribute named after the predicted attribute, such as
`age_prediction`.

This operation only supports `number`-typed attributes. You can come up with ways to
map other types to numbers to include them in the prediction. For example mapping gender to `0.0`
and `1.0` makes sense.

====
It is a common practice to retain a test set which is not used for training the model. The test
set can be used to evaluate the accuracy of the model's predictions. You can do this by
<<derive-vertex-attribute, deriving>> a new vertex attribute that is undefined for the test set
and using this restricted attribute as the basis of the prediction.

[p-label]#Attribute to predict#::
The partially defined attribute that you want to predict.

[p-features]#Predictors#::
The attributes that will be used as the input of the predictions. Predictions will be
generated for vertices where all of the predictors are defined.

[p-method]#Method#::
+
 - **Linear regression** with no regularization.
 - **Ridge regression** (also known as Tikhonov regularization) with L2-regularization.
 - **Lasso** with L1-regularization.
 - **Logistic regression** for binary classification. (The predicted attribute must be 0 or 1.)
 - **Naive Bayes** classifier with multinomial event model.
 - **Decision tree** with maximum depth 5 and 32 bins for all features.
 - **Random forest** of 20 trees of depth 5 with 32 bins. One third of features are considered
   for splits at each node.
 - **Gradient-boosted trees** produce ensembles of decision trees with depth 5 and 32 bins.
====
