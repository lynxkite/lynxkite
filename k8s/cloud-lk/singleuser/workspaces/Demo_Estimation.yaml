- id: anchor
  operationId: Anchor
  parameters: {}
  x: -1250
  y: 600
  inputs: {}
  parametricParameters: {}
- id: Import-CSV_3
  operationId: Import CSV
  parameters:
    imported_table: 4fb13f9a-aad2-3a83-b315-99d1efed2290
    last_settings: |-
      {
        "sql" : "",
        "infer" : "no",
        "timestamp_format" : "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
        "quote" : "\"",
        "imported_columns" : "",
        "null_value" : "",
        "escape" : "\\",
        "columns" : "",
        "filename" : "UPLOAD$/f317f40169a4158dbd765d9d282a4b0e.sok-relationships-filtered.csv",
        "comment" : "",
        "ignore_trailing_white_space" : "no",
        "ignore_leading_white_space" : "no",
        "date_format" : "yyyy-MM-dd",
        "error_handling" : "FAILFAST",
        "limit" : "",
        "delimiter" : ","
      }
    filename: UPLOAD$/f317f40169a4158dbd765d9d282a4b0e.sok-relationships-filtered.csv
  x: -1390.310648213277
  y: 1200
  inputs: {}
  parametricParameters: {}
- id: Import-CSV_4
  operationId: Import CSV
  parameters:
    imported_table: dce33b31-6d9a-36ae-9852-a30c24c22448
    last_settings: |-
      {
        "sql" : "",
        "infer" : "no",
        "timestamp_format" : "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
        "quote" : "\"",
        "imported_columns" : "",
        "null_value" : "",
        "escape" : "\\",
        "columns" : "",
        "filename" : "UPLOAD$/7ca08a9a3398a929a1a9452b72079e1d.filtered_profiles_v2.csv",
        "comment" : "",
        "ignore_trailing_white_space" : "no",
        "ignore_leading_white_space" : "no",
        "date_format" : "yyyy-MM-dd",
        "error_handling" : "FAILFAST",
        "limit" : "",
        "delimiter" : ","
      }
    filename: UPLOAD$/7ca08a9a3398a929a1a9452b72079e1d.filtered_profiles_v2.csv
  x: -1258
  y: 1359
  inputs: {}
  parametricParameters: {}
- id: Use-table-as-graph_2
  operationId: Use table as graph
  parameters:
    src: Source
    dst: Destination
  x: -1100
  y: 1200
  inputs:
    table:
      boxId: Import-CSV_3
      id: table
  parametricParameters: {}
- id: Use-table-as-vertex-attributes_2
  operationId: Use table as vertex attributes
  parameters:
    id_attr: stringId
    id_column: User_ID
  x: -900
  y: 1300
  inputs:
    graph:
      boxId: Use-table-as-graph_2
      id: graph
    attributes:
      boxId: Import-CSV_4
      id: table
  parametricParameters: {}
- id: Fill-vertex-attributes-with-constant-default-values_1
  operationId: Fill vertex attributes with constant default values
  parameters:
    fill_User_ID: '0'
  x: -750
  y: 1200
  inputs:
    graph:
      boxId: Use-table-as-vertex-attributes_2
      id: graph
  parametricParameters: {}
- id: Convert-vertex-attribute-to-Double_3
  operationId: Convert vertex attribute to Double
  parameters:
    attr: 'Age,Gender,Last_Login_Days,Registration_Days,User_ID'
  x: -450
  y: 1200
  inputs:
    graph:
      boxId: Fill-vertex-attributes-with-constant-default-values_1
      id: graph
  parametricParameters: {}
- id: Filter-by-attributes_2
  operationId: Filter by attributes
  parameters:
    filterva_Age: '(10,90)'
  x: -50
  y: 900
  inputs:
    graph:
      boxId: Fill-vertex-attributes-with-constant-default-values_2
      id: graph
  parametricParameters: {}
- id: Find-connected-components_1
  operationId: Find connected components
  parameters: {}
  x: 100
  y: 800
  inputs:
    graph:
      boxId: Filter-by-attributes_2
      id: graph
  parametricParameters: {}
- id: Aggregate-from-segmentation_2
  operationId: Aggregate from segmentation
  parameters:
    apply_to_graph: .connected_components
    aggregate_size: max
  x: 250
  y: 900
  inputs:
    graph:
      boxId: Find-connected-components_1
      id: graph
  parametricParameters: {}
- id: Filter-by-attributes_3
  operationId: Filter by attributes
  parameters:
    filterva_connected_components_size_max: '>10000'
  x: 400
  y: 800
  inputs:
    graph:
      boxId: Aggregate-from-segmentation_2
      id: graph
  parametricParameters: {}
- id: Fill-vertex-attributes-with-constant-default-values_2
  operationId: Fill vertex attributes with constant default values
  parameters:
    fill_Age: '0'
  x: -282.2246688810848
  y: 1340.280836101356
  inputs:
    graph:
      boxId: Convert-vertex-attribute-to-Double_3
      id: graph
  parametricParameters: {}
- id: Discard-vertex-attributes_4
  operationId: Discard vertex attributes
  parameters:
    name: 'Region,connected_components_size_max'
  x: 700
  y: 800
  inputs:
    graph:
      boxId: Split-to-train-and-test-set_2
      id: graph
  parametricParameters: {}
- id: Discard-segmentation_1
  operationId: Discard segmentation
  parameters: {}
  x: 850
  y: 900
  inputs:
    graph:
      boxId: Discard-vertex-attributes_4
      id: graph
  parametricParameters: {}
- id: Split-to-train-and-test-set_2
  operationId: Split to train and test set
  parameters: {}
  x: 550
  y: 900
  inputs:
    graph:
      boxId: Filter-by-attributes_3
      id: graph
  parametricParameters: {}
- id: Aggregate-on-neighbors_3
  operationId: Aggregate on neighbors
  parameters:
    aggregate_Age_train: average
    direction: all edges
  x: 1100
  y: 750
  inputs:
    graph:
      boxId: Discard-segmentation_1
      id: graph
  parametricParameters: {}
- id: Rename-vertex-attributes_4
  operationId: Rename vertex attributes
  parameters:
    change_neighborhood_Age_train_average: Age_prediction
  x: 1350
  y: 750
  inputs:
    graph:
      boxId: Aggregate-on-neighbors_3
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_11
  operationId: Derive vertex attribute
  parameters:
    output: error
    expr: Math.abs(Age_test-Age_prediction)
  x: 1650
  y: 750
  inputs:
    graph:
      boxId: Rename-vertex-attributes_4
      id: graph
  parametricParameters: {}
- id: Aggregate-vertex-attribute-globally_1
  operationId: Aggregate vertex attribute globally
  parameters:
    aggregate_error: average
  x: 1950
  y: 750
  inputs:
    graph:
      boxId: Derive-vertex-attribute_11
      id: graph
  parametricParameters: {}
- id: Find-infocom-communities_2
  operationId: Find infocom communities
  parameters:
    bothdir: 'false'
  x: 1100
  y: 1400
  inputs:
    graph:
      boxId: Discard-segmentation_1
      id: graph
  parametricParameters: {}
- id: Predict-attribute-by-viral-modeling_2
  operationId: Predict attribute by viral modeling
  parameters:
    apply_to_graph: .communities
    seed: '1167456500'
    min_ratio_defined: '0.5'
    max_deviation: '3'
    min_num_defined: '2'
  x: 1300
  y: 1300
  inputs:
    graph:
      boxId: Find-infocom-communities_2
      id: graph
  parametricParameters: {}
- id: Discard-scalars_2
  operationId: Discard scalars
  parameters:
    name: >-
      viral Age coverage after iteration 1,viral Age coverage after iteration
      2,viral Age coverage after iteration 3,viral Age coverage initial,viral
      Age mean absolute prediction error after iteration 1,viral Age mean
      absolute prediction error after iteration 2,viral Age mean absolute
      prediction error after iteration 3
  x: 1450
  y: 1400
  inputs:
    graph:
      boxId: Predict-attribute-by-viral-modeling_2
      id: graph
  parametricParameters: {}
- id: Discard-vertex-attributes_5
  operationId: Discard vertex attributes
  parameters:
    name: >-
      viral_Age_after_iteration_1,viral_Age_after_iteration_2,viral_Age_spread_over_iterations,viral_Age_test,viral_Age_train,viral_roles
  x: 1600
  y: 1300
  inputs:
    graph:
      boxId: Discard-scalars_2
      id: graph
  parametricParameters: {}
- id: Rename-vertex-attributes_5
  operationId: Rename vertex attributes
  parameters:
    change_viral_Age_after_iteration_3: Age_prediction
  x: 1750
  y: 1400
  inputs:
    graph:
      boxId: Discard-vertex-attributes_5
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_12
  operationId: Derive vertex attribute
  parameters:
    output: error
    expr: Math.abs(Age_test-Age_prediction)
  x: 1900
  y: 1300
  inputs:
    graph:
      boxId: Rename-vertex-attributes_5
      id: graph
  parametricParameters: {}
- id: Aggregate-vertex-attribute-globally_2
  operationId: Aggregate vertex attribute globally
  parameters:
    aggregate_error: average
  x: 2050
  y: 1400
  inputs:
    graph:
      boxId: Derive-vertex-attribute_12
      id: graph
  parametricParameters: {}
- id: Find-triangles_2
  operationId: Find triangles
  parameters:
    bothdir: 'false'
  x: 1100
  y: 1100
  inputs:
    graph:
      boxId: Discard-segmentation_1
      id: graph
  parametricParameters: {}
- id: Aggregate-to-segmentation_2
  operationId: Aggregate to segmentation
  parameters:
    apply_to_graph: .triangles
    aggregate_Gender: sum
  x: 1250
  y: 1000
  inputs:
    graph:
      boxId: Find-triangles_2
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_13
  operationId: Derive vertex attribute
  parameters:
    apply_to_graph: .triangles
    output: MMM
    expr: if(Gender_sum == 3)1.0 else 0.0
  x: 1400
  y: 1100
  inputs:
    graph:
      boxId: Aggregate-to-segmentation_2
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_14
  operationId: Derive vertex attribute
  parameters:
    apply_to_graph: .triangles
    output: FFM
    expr: if(Gender_sum ==  1.0) 1.0 else 0.0
  x: 1550
  y: 1000
  inputs:
    graph:
      boxId: Derive-vertex-attribute_13
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_15
  operationId: Derive vertex attribute
  parameters:
    apply_to_graph: .triangles
    output: FMM
    expr: |-
      if(Gender_sum == 2.0) 1.0 else 0.0

  x: 1700
  y: 1100
  inputs:
    graph:
      boxId: Derive-vertex-attribute_14
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_16
  operationId: Derive vertex attribute
  parameters:
    apply_to_graph: .triangles
    output: FFF
    expr: if(Gender_sum == 0.0) 1.0 else 0.0
  x: 1850
  y: 1000
  inputs:
    graph:
      boxId: Derive-vertex-attribute_15
      id: graph
  parametricParameters: {}
- id: Aggregate-from-segmentation_3
  operationId: Aggregate from segmentation
  parameters:
    aggregate_FFF: sum
    apply_to_graph: .triangles
    prefix: ''
    aggregate_Gender_sum: count
    aggregate_MMM: sum
    aggregate_FMM: sum
    aggregate_FFM: sum
  x: 2000
  y: 1100
  inputs:
    graph:
      boxId: Derive-vertex-attribute_16
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_17
  operationId: Derive vertex attribute
  parameters:
    output: MMM_prop
    expr: MMM_sum/Gender_sum_count
  x: 2150
  y: 1000
  inputs:
    graph:
      boxId: Aggregate-from-segmentation_3
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_18
  operationId: Derive vertex attribute
  parameters:
    output: FMM_prop
    expr: FMM_sum/Gender_sum_count
  x: 2300
  y: 1100
  inputs:
    graph:
      boxId: Derive-vertex-attribute_17
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_19
  operationId: Derive vertex attribute
  parameters:
    output: FFM_prop
    expr: FFM_sum/Gender_sum_count
  x: 2450
  y: 1000
  inputs:
    graph:
      boxId: Derive-vertex-attribute_18
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_20
  operationId: Derive vertex attribute
  parameters:
    output: FFF_prop
    expr: FFF_sum/Gender_sum_count
  x: 2600
  y: 1100
  inputs:
    graph:
      boxId: Derive-vertex-attribute_19
      id: graph
  parametricParameters: {}
- id: Discard-vertex-attributes_6
  operationId: Discard vertex attributes
  parameters:
    name: 'FFF_sum,FFM_sum,FMM_sum,Gender_sum_count,MMM_sum'
  x: 2900
  y: 1100
  inputs:
    graph:
      boxId: Fill-vertex-attributes-with-constant-default-values_4
      id: graph
  parametricParameters: {}
- id: Compute-degree_3
  operationId: Compute degree
  parameters:
    direction: all edges
  x: 3050
  y: 1000
  inputs:
    graph:
      boxId: Discard-vertex-attributes_6
      id: graph
  parametricParameters: {}
- id: Compute-clustering-coefficient_2
  operationId: Compute clustering coefficient
  parameters: {}
  x: 3200
  y: 1100
  inputs:
    graph:
      boxId: Compute-degree_3
      id: graph
  parametricParameters: {}
- id: Aggregate-on-neighbors_4
  operationId: Aggregate on neighbors
  parameters:
    direction: all edges
    aggregate_Age_train: 'average,std_deviation'
    aggregate_Gender: average
  x: 3350
  y: 1000
  inputs:
    graph:
      boxId: Compute-clustering-coefficient_2
      id: graph
  parametricParameters: {}
- id: Train-linear-regression-model_3
  operationId: Train linear regression model
  parameters:
    name: regression
    label: Age_train
    features: >-
      FFM_prop,FMM_prop,Gender,Last_Login_Days,MMM_prop,Registration_Days,clustering_coefficient,degree,neighborhood_Age_train_average,neighborhood_Age_train_std_deviation,neighborhood_Gender_average
  x: 3600
  y: 1100
  inputs:
    graph:
      boxId: Aggregate-on-neighbors_4
      id: graph
  parametricParameters: {}
- id: Predict-with-model_3
  operationId: Predict with model
  parameters:
    name: Age_prediction
  x: 3750
  y: 1250
  inputs:
    graph:
      boxId: Train-linear-regression-model_3
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_22
  operationId: Derive vertex attribute
  parameters:
    output: error
    expr: Math.abs(Age_test-Age_prediction)
  x: 3900
  y: 1100
  inputs:
    graph:
      boxId: Predict-with-model_3
      id: graph
  parametricParameters: {}
- id: Aggregate-vertex-attribute-globally_4
  operationId: Aggregate vertex attribute globally
  parameters:
    aggregate_error: average
  x: 4050
  y: 1200
  inputs:
    graph:
      boxId: Derive-vertex-attribute_22
      id: graph
  parametricParameters: {}
- id: Export-to-CSV_1
  operationId: Export to CSV
  parameters: {}
  x: 2800
  y: 1700
  inputs:
    table:
      boxId: SQL1_1
      id: table
  parametricParameters: {}
- id: Derive-vertex-attribute_1
  operationId: Derive vertex attribute
  parameters:
    output: Age
    expr: if(Age > 0) Some(Age) else None
  x: -50
  y: 1700
  inputs:
    graph:
      boxId: Fill-vertex-attributes-with-constant-default-values_2
      id: graph
  parametricParameters: {}
- id: Fill-vertex-attributes-with-constant-default-values_4
  operationId: Fill vertex attributes with constant default values
  parameters:
    fill_FFF_prop: '0'
    fill_FMM_prop: '0'
    fill_FFM_prop: '0'
    fill_MMM_prop: '0'
  x: 2750
  y: 1000
  inputs:
    graph:
      boxId: Derive-vertex-attribute_20
      id: graph
  parametricParameters: {}
- id: SQL1_1
  operationId: SQL1
  parameters:
    sql: |
      select * from vertices
  x: 2600
  y: 1800
  inputs:
    input:
      boxId: Discard-vertex-attributes_2
      id: graph
  parametricParameters: {}
- id: Comment_1
  operationId: Comment
  parameters:
    comment: >-
      # Issue:

      In this demo, we illustrate a data science process to a popular

      problem of imputing missing data for certain attribute (in this case:
      age). We assume that the missing data

      is not completely random, it depends in the real values of the data

      and other attributes (e.g. women with higher age choose not to include

      their age in their profiles). If we just remove the data with missing

      values we will produce a bias in any posterior analysis performed.



      From business perspective, the missing data could be a main driver for
      campaign

      targeting, churn prediction, credit score estimation, etc. As such, the

      ability to impute the missing data has direct impact to achieving certain
      business

      objectives
  x: -1347.5403968888431
  y: 800
  inputs: {}
  parametricParameters: {}
- id: Comment_2
  operationId: Comment
  parameters:
    comment: |
      _Age as linear regression or decision tree prediction of graph features_
      * Calculate graph related attributes:
        * Proportion of gender triads (MMM, FMM, FFM, FFF)
        [Triadic closure](https://en.wikipedia.org/wiki/Triadic_closure).
        * Number of connections.
        * Neighbor's average age.
        * Neighbor's age standard deviation.
        * Neighbor's gender proportion.
        * Degree.
        * [Clustering coefficient](https://en.wikipedia.org/wiki/Clustering_coefficient).
      * Feed the graph attributes to a linear regression model.
      * With this model, predict the age in the test set.
      * Calculate the Mean Absolute Error. In this case: 3.4
  x: 4150
  y: 900
  inputs: {}
  parametricParameters: {}
- id: Comment_3
  operationId: Comment
  parameters:
    comment: >+
      _Age as the average of its most similar community_

      * Group users into communities according to their connections.

      * For each user, find its community with lowest age variation.

      * Set the average of the chosen community as the age prediction in tests
      set.

      * Compute the Mean Absolute Error. In this case: 1.9.

  x: 2200
  y: 1300
  inputs: {}
  parametricParameters: {}
- id: Comment_4
  operationId: Comment
  parameters:
    comment: |
      _Age as average of connections age_
      * Predict the age as the average of connected users
      for the test set previously divided.
      * Calculate the Mean Absolute Error. In this case: 3.5
  x: 2100
  y: 700
  inputs: {}
  parametricParameters: {}
- id: Comment_5
  operationId: Comment
  parameters:
    comment: >-
      ### Intro to the dataset:

      The dataset is available thanks to the Standford Network Analysis
      Project.

      There are two files, the user

      relationship data which shows connections between users and the user
      profile

      data wich includes the attributes for each user. To download the data,
      please go to <https://snap.stanford.edu/data/soc-Pokec.html>.



      For demonstration purposes, we will work only with a small sample of the
      data.

      We will take only the largest connected component group of users from
      Prievidza,

      a small city in the center of Slovakia. The user profiles are already
      filtered.
  x: -650
  y: 850
  inputs: {}
  parametricParameters: {}
- id: Comment_6
  operationId: Comment
  parameters:
    comment: >-
      ### Model Selection:

      Try out three different models, evaluate them and pick the best one for
      the

      real age prediction. Use only the users with a defined age (not blank),
      separated data into

      train and test set to allow comparison of model performance.
  x: 271.3583783542738
  y: 516.3880709362617
  inputs: {}
  parametricParameters: {}
- id: Comment_7
  operationId: Comment
  parameters:
    comment: >-
      ### Age Prediction:

      After comparing the error of the three models, the best one is the _viral
      modeling_.

      The problem with this model is that it does not work for outlier nodes. We
      want

      to predict the age of ALL the nodes, so we combine this method with the
      first

      method for the users left aside.


      The few nodes that are not predicted with either of the models
      (disconnected nodes)

      we use a simple imputation with the overall average.


      We download a CSV with the final dataset, with the original and final age
      attribute.
  x: 250
  y: 1347.3002823848478
  inputs: {}
  parametricParameters: {}
- id: Train-a-decision-tree-regression-model_1
  operationId: Train a decision tree regression model
  parameters:
    features: >-
      FFM_prop,FMM_prop,Gender,Last_Login_Days,MMM_prop,Registration_Days,clustering_coefficient,degree,neighborhood_Age_train_average,neighborhood_Age_train_std_deviation,neighborhood_Gender_average
    label: Age_train
  x: 3600
  y: 900
  inputs:
    graph:
      boxId: Aggregate-on-neighbors_4
      id: graph
  parametricParameters: {}
- id: Predict-with-model_2
  operationId: Predict with model
  parameters:
    name: Age_prediction
  x: 3750
  y: 800
  inputs:
    graph:
      boxId: Train-a-decision-tree-regression-model_1
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_21
  operationId: Derive vertex attribute
  parameters:
    output: error
    expr: Math.abs(Age_test-Age_prediction)
  x: 3900
  y: 900
  inputs:
    graph:
      boxId: Predict-with-model_2
      id: graph
  parametricParameters: {}
- id: Aggregate-vertex-attribute-globally_3
  operationId: Aggregate vertex attribute globally
  parameters:
    aggregate_error: average
  x: 4050
  y: 800
  inputs:
    graph:
      boxId: Derive-vertex-attribute_21
      id: graph
  parametricParameters: {}
- id: Find-infocom-communities_1
  operationId: Find infocom communities
  parameters:
    bothdir: 'false'
  x: 150
  y: 1800
  inputs:
    graph:
      boxId: Derive-vertex-attribute_1
      id: graph
  parametricParameters: {}
- id: Predict-attribute-by-viral-modeling_1
  operationId: Predict attribute by viral modeling
  parameters:
    apply_to_graph: .communities
    seed: '1167456500'
    max_deviation: '10'
    min_num_defined: '2'
  x: 350
  y: 1700
  inputs:
    graph:
      boxId: Find-infocom-communities_1
      id: graph
  parametricParameters: {}
- id: Discard-scalars_1
  operationId: Discard scalars
  parameters:
    name: >-
      viral Age coverage after iteration 1,viral Age coverage after iteration
      2,viral Age coverage after iteration 3,viral Age coverage initial,viral
      Age mean absolute prediction error after iteration 1,viral Age mean
      absolute prediction error after iteration 2,viral Age mean absolute
      prediction error after iteration 3
  x: 550
  y: 1800
  inputs:
    graph:
      boxId: Predict-attribute-by-viral-modeling_1
      id: graph
  parametricParameters: {}
- id: Discard-vertex-attributes_1
  operationId: Discard vertex attributes
  parameters:
    name: >-
      viral_Age_after_iteration_1,viral_Age_after_iteration_2,viral_Age_spread_over_iterations,viral_Age_test,viral_Age_train,viral_roles
  x: 750
  y: 1700
  inputs:
    graph:
      boxId: Discard-scalars_1
      id: graph
  parametricParameters: {}
- id: Rename-vertex-attributes_1
  operationId: Rename vertex attributes
  parameters:
    change_viral_Age_after_iteration_3: Age_prediction
  x: 950
  y: 1800
  inputs:
    graph:
      boxId: Discard-vertex-attributes_1
      id: graph
  parametricParameters: {}
- id: Merge-two-vertex-attributes_1
  operationId: Merge two vertex attributes
  parameters:
    attr2: Age_prediction_new
    name: Age_final
  x: 1950
  y: 1700
  inputs:
    graph:
      boxId: Fill-vertex-attributes-with-constant-default-values_6
      id: graph
  parametricParameters: {}
- id: Aggregate-on-neighbors_1
  operationId: Aggregate on neighbors
  parameters:
    direction: all edges
    aggregate_Age: average
  x: 1150
  y: 1700
  inputs:
    graph:
      boxId: Rename-vertex-attributes_1
      id: graph
  parametricParameters: {}
- id: Merge-two-vertex-attributes_2
  operationId: Merge two vertex attributes
  parameters:
    name: Age_prediction_new
    attr2: neighborhood_Age_average
    attr1: Age_prediction
  x: 1350
  y: 1800
  inputs:
    graph:
      boxId: Aggregate-on-neighbors_1
      id: graph
  parametricParameters: {}
- id: Aggregate-vertex-attribute-globally_7
  operationId: Aggregate vertex attribute globally
  parameters:
    aggregate_Age: average
  x: 1550
  y: 1700
  inputs:
    graph:
      boxId: Merge-two-vertex-attributes_2
      id: graph
  parametricParameters: {}
- id: Fill-vertex-attributes-with-constant-default-values_6
  operationId: Fill vertex attributes with constant default values
  parameters:
    fill_Age_prediction_new: '25.57'
  x: 1750
  y: 1800
  inputs:
    graph:
      boxId: Aggregate-vertex-attribute-globally_7
      id: graph
  parametricParameters: {}
- id: Discard-vertex-attributes_2
  operationId: Discard vertex attributes
  parameters:
    name: >-
      Age_prediction,Age_prediction_new,Last_Login_Days,Region,Registration_Days,id,neighborhood_Age_average,stringId
  x: 2400
  y: 1700
  inputs:
    graph:
      boxId: Derive-vertex-attribute_2
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_2
  operationId: Derive vertex attribute
  parameters:
    output: Age_final
    expr: Age_final.toInt
  x: 2150
  y: 1800
  inputs:
    graph:
      boxId: Merge-two-vertex-attributes_1
      id: graph
  parametricParameters: {}
- id: Predict-with-model_1
  operationId: Predict with model
  parameters:
    name: Age_prediction
  x: 1350
  y: 500
  inputs:
    graph:
      boxId: Train-linear-regression-model_1
      id: graph
  parametricParameters: {}
- id: Train-linear-regression-model_1
  operationId: Train linear regression model
  parameters:
    label: Age_train
    features: 'Gender,Last_Login_Days,Registration_Days,User_ID'
  x: 1100
  y: 500
  inputs:
    graph:
      boxId: Discard-segmentation_1
      id: graph
  parametricParameters: {}
- id: Derive-vertex-attribute_3
  operationId: Derive vertex attribute
  parameters:
    output: error
    expr: Math.abs(Age_test-Age_prediction)
  x: 1550
  y: 500
  inputs:
    graph:
      boxId: Predict-with-model_1
      id: graph
  parametricParameters: {}
- id: Aggregate-vertex-attribute-globally_5
  operationId: Aggregate vertex attribute globally
  parameters:
    aggregate_error: average
  x: 1800
  y: 500
  inputs:
    graph:
      boxId: Derive-vertex-attribute_3
      id: graph
  parametricParameters: {}
