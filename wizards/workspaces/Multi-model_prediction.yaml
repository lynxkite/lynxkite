- id: anchor
  inputs: {}
  operationId: Anchor
  parameters:
    in_progress: no
    steps: >-
      [{"title":"Introduction","description":"Hello there.  Attribute prediction is
      one of the most common data science problems.\nIf the data to be predicted is
      organized as a graph, where entities (vertices) are connected,\nwe can use special
      graph-based methods to effectively predict any missing attributes of an entity.\nThis
      wizard illustrates an **automated machine learning process**\nusing three different
      models: **linear regression** (that does not use the\ngraph structure), **neighborhood**
      (that predicts attributes using the\nneighboring vertices within a graph) and
      **community** (that predicts\nattributes using communities within a graph).
      Follow the steps below\nto find out how the auto graph machine learning works.\n\nThis
      wizard uses an already uploaded data set, which is a\ngenerated telco graph.
      In this graph, a vertex represents an\naccount owner of a SIM, and the edges
      are present if there were any phone calls between\nthese SIMs. The attribute
      we want to predict is the age of the account owner.\n\nIf you prefer to upload
      your own graph, please check out a\n[bit more complex wizard that allows data
      upload](https://try.lynxkite.com/#/wizard/custom_boxes/Multi-model%20prediction-upload).\n\nThe
      following is a sample from a [social network data set](https://snap.stanford.edu/data/soc-Pokec.html)
      that you could use\nto test that wizard.\n\n  * [vertices](https://d955izgyg907d.cloudfront.net/public/demog_vertices.csv)\n  *
      [edges](https://d955izgyg907d.cloudfront.net/public/demog_edges.csv)","box":"","popup":""},{"box":"custom_boxes/predict_attribute_1","popup":"precheck","title":"Basic
      checks","description":"We check what percentage of the values are missing (and
      thus, should be predicted). Also, we write some basic statistics about the existing
      values for this column."},{"title":"Bucketed graph check","description":"The
      bucketed graph check allows users to understand if using features of the graph
      has the potential to improve prediction.\nIn this chart, nodes represent age
      groups. For example, we have a group that contains the 39 people who are less
      than\n15 years old. The width of the edge connecting two age groups represents
      the number of connections between any two members of\nthat group. For graph-based
      attribute prediction to work well, the edge that connects an age group to itself
      should be\nrelatively thick, meaning that people of the same age tend to call
      each other.\n\nIn this chart, both the x-axis and the y-axis represent the same
      age groups: this provides a clearer (diagonal) visual\nrepresentation.\n","box":"custom_boxes/predict_attribute_1","popup":"bucketed"},{"box":"custom_boxes/predict_attribute_1","popup":"sample","title":"Graph
      sample","description":"This visualization shows a sample of the graph that was
      input. Here, one vertex (Shannon Ray) does not have the attribute to be predicted,
      while its neighborhood does. In similar scenarios, this environment helps LynxKite
      to come up with a better prediction for the missing value."},{"title":"Model
      performance overview: barcharts","description":"The error distribution of each
      model. Computing this can take some time, since we are splitting our data into
      a train set and a test set, build three models, and evaluate each model against
      the test set. The resulting bar chart should give you an indication about the
      performance of the models: higher bars in the middle region are better (more
      predictions are near to zero error), whereas higher bars towards the edges are
      worse (more predictions are off the mark).", "box":"custom_boxes/predict_attribute_1","popup":"errors"},{"title":"Model
      performance comparison", "description":"The mean squared error for each of the
      three methods. Lower values mean better prediction accuracy. Unless you have
      already completed the previous step, computing this can take some time, since
      we are splitting our data into a train set and a test set, build three models,
      and evaluate each model against the test set.", "box":"custom_boxes/predict_attribute_1","popup":"error
      graph attributes"},{"title":"Download results", "description":"Download a CSV
      file that contains the results. This file is almost the same as your input CSV
      file, but it contains three additional columns: the three predictions given
      by the three prediction methods. We fall back to the linear regression results
      where the graph-based prediction methods could not come up with anything.\nClick
      on the play button to start the computation; click on the Download text if the
      computation has finished. **The computation can take longer**, as we are applying
      each of our three models to the whole input data set.", "box":"Export-to-CSV_1","popup":"exported"}]
    wizard: yes
  parametricParameters: {}
  x: -624.8615623967544
  y: -254.74303369799804
- id: Import-CSV_1
  inputs: {}
  operationId: Import CSV
  parameters:
    filename: UPLOAD$/623571470014e0efc0dda7d27d9a54c0.andris_vertices.csv
    imported_table: 8170093a-adaa-365d-b4c2-1bf192ec1647
    infer: yes
    last_settings: |-
      {
        "sql" : "",
        "infer" : "yes",
        "timestamp_format" : "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
        "quote" : "\"",
        "imported_columns" : "",
        "null_value" : "",
        "escape" : "\\",
        "columns" : "",
        "filename" : "UPLOAD$/623571470014e0efc0dda7d27d9a54c0.andris_vertices.csv",
        "comment" : "",
        "ignore_trailing_white_space" : "no",
        "ignore_leading_white_space" : "no",
        "date_format" : "yyyy-MM-dd",
        "error_handling" : "FAILFAST",
        "limit" : "",
        "delimiter" : ","
      }
  parametricParameters: {}
  x: -862.9371933070149
  y: -62.95834039603037
- id: Import-CSV_2
  inputs: {}
  operationId: Import CSV
  parameters:
    filename: UPLOAD$/cfbe7eeda66d57005f879f8f9a3fd962.andris_edges.csv
    imported_table: fe674546-edfb-3ed6-a1eb-ce6505c7b8fe
    infer: yes
    last_settings: |-
      {
        "sql" : "",
        "infer" : "yes",
        "timestamp_format" : "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
        "quote" : "\"",
        "imported_columns" : "",
        "null_value" : "",
        "escape" : "\\",
        "columns" : "",
        "filename" : "UPLOAD$/cfbe7eeda66d57005f879f8f9a3fd962.andris_edges.csv",
        "comment" : "",
        "ignore_trailing_white_space" : "no",
        "ignore_leading_white_space" : "no",
        "date_format" : "yyyy-MM-dd",
        "error_handling" : "FAILFAST",
        "limit" : "",
        "delimiter" : ","
      }
  parametricParameters: {}
  x: -906.6593844229316
  y: 396.30115584297386
- id: Use-table-as-vertices_1
  inputs:
    table:
      boxId: Import-CSV_1
      id: table
  operationId: Use table as vertices
  parameters: {}
  parametricParameters: {}
  x: -511.75761835886107
  y: -64.47926807723755
- id: Use-table-as-edges_1
  inputs:
    graph:
      boxId: Derive-graph-attribute_1
      id: graph
    table:
      boxId: Use-table-as-vertices_2
      id: graph
  operationId: Use table as edges
  parameters:
    attr: name
    dst: callee
    src: caller
  parametricParameters: {}
  x: 23.808590173513622
  y: 177.46135428579828
- id: custom_boxes/predict_attribute_1
  inputs:
    graph:
      boxId: Use-table-as-edges_1
      id: graph
  operationId: custom_boxes/predict attribute
  parameters: {}
  parametricParameters: {}
  x: 316.71801496330016
  y: 177.0186370029638
- id: Export-to-CSV_1
  inputs:
    table:
      boxId: custom_boxes/predict_attribute_1
      id: results
  operationId: Export to CSV
  parameters:
    for_download: yes
  parametricParameters: {}
  x: 724.1583941649114
  y: 145.02186460278165
- id: Use-table-as-vertices_2
  inputs:
    table:
      boxId: Import-CSV_2
      id: table
  operationId: Use table as vertices
  parameters: {}
  parametricParameters: {}
  x: -450.16629450995333
  y: 399.1583593046136
- id: Derive-graph-attribute_1
  inputs:
    graph:
      boxId: Use-table-as-vertices_1
      id: graph
  operationId: Derive graph attribute
  parameters:
    expr: '""'
    output: id_name
  parametricParameters: {}
  x: -168.11098217634645
  y: -58.490177665480005
- id: Comment_1
  inputs: {}
  operationId: Comment
  parameters:
    comment: >-
      The box below is a **custom box**, which is another workspace. You can dive
      into that workspace by clicking the ![arrow](/arrow.png) icon on the toolbar.
  parametricParameters: {}
  x: 224.2689651242476
  y: -27.020875743016333
